generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                           Int                            @id @default(autoincrement())
  password                     String
  firstName                    String
  lastName                     String
  linkedinAccount              String?
  dateOfBirth                  DateTime
  isActive                     Boolean                        @default(true)
  displayName                  String
  isAdmin                      Boolean                        @default(false)
  permission                   String[]
  institutionWorkerProfiles    InstitutionWorkerProfile[]
  StudentInstituionAffiliation StudentInstituionAffiliation[]
  researchPapers               ResearchPaper[]                @relation("Author")
  blogs                        Blog[]
  researchTeams                ResearchTeam[]
}

model ResearchPaper {
  id              Int       @id @default(autoincrement())
  title           String
  doi             String
  publicationDate DateTime
  pdfUrl          String
  nbCitation      Int
  abstract        String?
  authors         User[]    @relation("Author")
  keywords        Keyword[] @relation("PaperKeywords")
}

model Keyword {
  id     Int             @id @default(autoincrement())
  name   String
  papers ResearchPaper[] @relation("PaperKeywords")
}

model InstitutionWorkerProfile {
  id                          Int         @id @default(autoincrement())
  position                    String
  teachingPosition            Boolean
  researchPosition            Boolean
  administrationPosition      Boolean
  department                  String
  otherInstitution            String?
  isInstitutionProfileManager Boolean     @default(false)
  isPrimary                   Boolean     @default(false)
  userId                      Int
  institutionId               Int
  user                        User        @relation(fields: [userId], references: [id])
  institution                 Institution @relation(fields: [institutionId], references: [id])
}

model StudentInstituionAffiliation {
  id             Int         @id @default(autoincrement())
  enrolment_year Int
  program        String?
  institutionId  Int
  institution    Institution @relation(fields: [institutionId], references: [id])
  user           User        @relation(fields: [userId], references: [id])
  userId         Int
  bacScore       Float?
}

model Institution {
  id                           Int                            @id @default(autoincrement())
  name                         String
  address                      String
  website                      String
  contact                      String
  accreditation                String
  workers                      InstitutionWorkerProfile[]
  researchLab                  ResearchLab[]
  verified                     Boolean                        @default(false)
  // Self-relation: Parent Institution
  parentInstitutionId          Int?
  parentInstitution            Institution?                   @relation("InstitutionHierarchy", fields: [parentInstitutionId], references: [id])
  // Self-relation: Child Institutions
  childInstitutions            Institution[]                  @relation("InstitutionHierarchy")
  StudentInstituionAffiliation StudentInstituionAffiliation[]

  researchOffer     ResearchOffer[]
  events            Event[]
  institutionKind   InstitutionKind @relation(fields: [institutionKindId], references: [id])
  institutionKindId Int
  researchTeam      ResearchTeam[]
  curriculum        Curriculum[]
  course            Course[]
  Funding           Funding[]
}

model InstitutionKind {
  id           Int           @id @default(autoincrement())
  type         String
  isPublic     Boolean
  institutions Institution[]
}

model Blog {
  id          Int      @id @default(autoincrement())
  title       String
  content     String
  createdDate DateTime @default(now())
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  tags        Tag[]    @relation("BlogTags")
}

model Tag {
  id     Int     @id @default(autoincrement())
  name   String
  blogs  Blog[]  @relation("BlogTags")
  events Event[] @relation("EventTags")
}

model Event {
  id            Int         @id @default(autoincrement())
  title         String
  startDate     DateTime
  endDate       DateTime
  startTime     DateTime
  endTime       DateTime
  location      String
  coordinate    String
  online        Boolean
  organizer     String
  type          String
  tags          Tag[]       @relation("EventTags")
  nstitution    Institution @relation(fields: [institutionId], references: [id])
  institutionId Int
}

model ResearchOffer {
  id            Int          @id @default(autoincrement())
  title         String
  description   String
  qualification String
  deadline      DateTime
  contact       String
  institutionId Int?
  institution   Institution? @relation(fields: [institutionId], references: [id])
}

model ResearchLab {
  id            Int            @id @default(autoincrement())
  name          String
  description   String
  location      String
  contact       String
  institutionId Int?
  innstitution  Institution?   @relation(fields: [institutionId], references: [id])
  ResearchTeam  ResearchTeam[]
}

model ResearchTeam {
  id            Int          @id @default(autoincrement())
  name          String
  description   String
  location      String
  contact       String
  institutionId Int?
  innstitution  Institution? @relation(fields: [institutionId], references: [id])
  researchLabId Int?
  researchLab   ResearchLab? @relation(fields: [researchLabId], references: [id])
  user          User[]
}

model Curriculum {
  id                   Int            @id @default(autoincrement())
  name                 String
  description          String
  degree               String
  admissionRequirement String
  applicationProcedure String
  tuition              Int
  institutionId        Int
  institution          Institution    @relation(fields: [institutionId], references: [id])
  curriculumKind       CurriculumKind @relation(fields: [curriculumKindId], references: [id])
  curriculumKindId     Int
  fields               Field[]
  terms                Term[]
}

model Field {
  id          Int          @id @default(autoincrement())
  name        String
  description String
  curriculums Curriculum[]
}

model CurriculumKind {
  id          Int          @id @default(autoincrement())
  name        String
  description String
  isDegree    Boolean
  curriculums Curriculum[]
}

model Term {
  id           Int        @id @default(autoincrement())
  name         String
  startDate    DateTime
  endDate      DateTime
  Curriculum   Curriculum @relation(fields: [curriculumId], references: [id])
  curriculumId Int
  courses      Course[]
}

model Course {
  id            Int         @id @default(autoincrement())
  courseDate    DateTime
  startDate     DateTime
  name          String
  description   String
  credits       Int
  preReqs       String
  Term          Term        @relation(fields: [termId], references: [id])
  termId        Int
  institutionId Int
  institution   Institution @relation(fields: [institutionId], references: [id])
}

model Funding {
  id            Int         @id @default(autoincrement())
  title         String
  name          String
  description   String
  deadline      DateTime
  contactEmail  String
  contactLink   String
  institutionId Int
  institution   Institution @relation(fields: [institutionId], references: [id])
}
